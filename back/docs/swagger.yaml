openapi: 3.0.0
info:
  title: Product Management API
  description: API for managing products, users, shopping carts, and wishlists
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
        stock:
          type: integer
        createdAt:
          type: integer
        updatedAt:
          type: integer

    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
          minLength: 3
        firstname:
          type: string
        email:
          type: string
          format: email
        createdAt:
          type: integer
        updatedAt:
          type: integer

    Cart:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        totalItems:
          type: integer
        totalPrice:
          type: number
        createdAt:
          type: integer
        updatedAt:
          type: integer

    CartItem:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        productId:
          type: integer
        quantity:
          type: integer
          minimum: 1
        product:
          $ref: '#/components/schemas/Product'
        createdAt:
          type: integer
        updatedAt:
          type: integer

    Wishlist:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/WishlistItem'
        totalItems:
          type: integer
        createdAt:
          type: integer
        updatedAt:
          type: integer

    WishlistItem:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        productId:
          type: integer
        product:
          $ref: '#/components/schemas/Product'
        createdAt:
          type: integer
        updatedAt:
          type: integer

paths:
  /products:
    get:
      summary: Get all products
      description: Retrieve a list of all available products
      tags:
        - Products
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

    post:
      summary: Create a new product
      description: Create a new product (Admin only)
      tags:
        - Products
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - price
                - stock
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                  minimum: 0
                stock:
                  type: integer
                  minimum: 0
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '403':
          description: Admin privileges required
        '400':
          description: Invalid input data

  /products/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get a product by ID
      description: Retrieve detailed information about a specific product
      tags:
        - Products
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found

    put:
      summary: Update a product
      description: Update an existing product (Admin only)
      tags:
        - Products
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                  minimum: 0
                stock:
                  type: integer
                  minimum: 0
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '403':
          description: Admin privileges required
        '404':
          description: Product not found
        '400':
          description: Invalid input data

    delete:
      summary: Delete a product
      description: Delete an existing product (Admin only)
      tags:
        - Products
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Product deleted successfully
        '403':
          description: Admin privileges required
        '404':
          description: Product not found

  /account/account:
    post:
      summary: Create a new user account
      description: Register a new user with username, firstname, email, and password
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - firstname
                - email
                - password
              properties:
                username:
                  type: string
                  minLength: 3
                firstname:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input data
        '409':
          description: Email already exists

  /account/token:
    post:
      summary: Login and get JWT token
      description: Authenticate user and receive JWT token
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Invalid credentials
        '400':
          description: Invalid input data

  /account/profile:
    get:
      summary: Get user profile
      description: Retrieve the authenticated user's profile information
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

  /cart:
    get:
      summary: Get user's shopping cart
      description: Retrieve the authenticated user's shopping cart with all items
      tags:
        - Cart
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Shopping cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '401':
          description: Unauthorized

    post:
      summary: Add item to cart
      description: Add a product to the user's shopping cart
      tags:
        - Cart
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productId
                - quantity
              properties:
                productId:
                  type: integer
                quantity:
                  type: integer
                  minimum: 1
      responses:
        '200':
          description: Item added to cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized
        '404':
          description: Product not found

  /cart/items/{itemId}:
    parameters:
      - name: itemId
        in: path
        required: true
        schema:
          type: integer
    put:
      summary: Update cart item quantity
      description: Update the quantity of an item in the shopping cart
      tags:
        - Cart
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
              properties:
                quantity:
                  type: integer
                  minimum: 0
      responses:
        '200':
          description: Cart item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized
        '404':
          description: Cart item not found

    delete:
      summary: Remove item from cart
      description: Remove an item from the shopping cart
      tags:
        - Cart
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Item removed from cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '401':
          description: Unauthorized
        '404':
          description: Cart item not found

  /wishlist:
    get:
      summary: Get user's wishlist
      description: Retrieve the authenticated user's wishlist with all items
      tags:
        - Wishlist
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Wishlist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wishlist'
        '401':
          description: Unauthorized

    post:
      summary: Add item to wishlist
      description: Add a product to the user's wishlist
      tags:
        - Wishlist
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productId
              properties:
                productId:
                  type: integer
      responses:
        '200':
          description: Item added to wishlist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wishlist'
        '400':
          description: Invalid input data
        '401':
          description: Unauthorized
        '404':
          description: Product not found

  /wishlist/items/{itemId}:
    parameters:
      - name: itemId
        in: path
        required: true
        schema:
          type: integer
    delete:
      summary: Remove item from wishlist
      description: Remove an item from the wishlist
      tags:
        - Wishlist
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Item removed from wishlist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wishlist'
        '401':
          description: Unauthorized
        '404':
          description: Wishlist item not found